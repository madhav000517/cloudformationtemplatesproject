{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation AutoScalingMultiAZWithNotifications: Create a multi-az, load balanced and Auto Scaled sample web site running on an Apache Web Serever. The application is configured to span 2 Availability Zones in the region and is Auto-Scaled based on the CPU utilization of the web servers. Notifications will be sent to the operator email address on scaling events.it also has BAstion Instance,NAT Instance and RDS instances, using bastion and NAT instance to provide internet access to private subent servers(RDS,WebServer Instances)",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": { "default": "VPC " },
          "Parameters": [
            "VpcCidr",
            "PublicSubnetCidr",
            "PrivateSubnet1Cidr",
            "PrivateSubnet2Cidr",
            "PrivateSubnet3Cidr"
          ]
        },
		{
          "Label": { "default": "Instance" },
          "Parameters": [
            "KeyName",
			"SSHLocation",
			"InstanceType"
          ]
        },
		{
          "Label": { "default": "Auto Scaling " },
          "Parameters": [
            "WebServerCapacity",
			"OperatorEMail"
          ]
        },
		{
          "Label": { "default": "S3 Bucket" },
          "Parameters": [
            "AccessControl",
			"s3bucket"
          ]
        },
		{
          "Label": { "default": "DataBase Instance" },
          "Parameters": [
            "DBIdentifier",
			"MyDBName",
			"DBUser",
			"DBPassword",
			"DBAllocatedStorage",
			"MyDBInstanceClass"
          ]
        }
      ]
  }
  },

  "Parameters" : {

		"KeyName" : {
		  "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
		  "Type" : "String",
		  "MinLength": "1",
		  "MaxLength": "64",
		  "AllowedPattern" : "[-_ a-zA-Z0-9]*",
		  "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
		},
		"SSHLocation" : {
		  "Description" : "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
		  "Type" : "String",
		  "MinLength": "9",
		  "MaxLength": "18",
		  "Default" : "0.0.0.0/0",
		  "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
		  "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
		},
		"InstanceType" : {
		  "Description" : "EC2 instance type",
		  "Type" : "String",
		  "Default" : "t2.micro",
		  "AllowedValues" : [ "t2.micro","m2.small","m2.medium","m2.large","m2.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
		  "ConstraintDescription" : "must be a valid EC2 instance type."
		},
		"WebServerCapacity" : {
		  "Description" : "Number of EC2 instances to launch for the webservers auto scaling",
		  "Type" : "Number",
		  "Default" : "1"
		},
	   "DBIdentifier":{
		  "Type":"String",
		  "Description":"The identifier of the database"
		},
		"MyDBName":{
		  "Default":"MyDatabase",
		  "Description":"The database name",
		  "Type":"String",
		  "MinLength":"1",
		  "MaxLength":"64",
		  "AllowedPattern":"[a-zA-Z][a-zA-Z0-9]*",
		  "ConstraintDescription":"must begin with a letter and contain only alphanumeric characters."
		},
		"DBUser":{
		  "Description":"The database admin account username",
		  "Type":"String",
		  "MinLength":"1",
		  "MaxLength":"16",
		  "AllowedPattern":"[a-zA-Z][a-zA-Z0-9]*",
		  "ConstraintDescription":"must begin with a letter and contain only alphanumeric characters."
		},
		"DBPassword":{
		  "NoEcho":"true",
		  "Description":"The database admin account password",
		  "Type":"String",
		  "MinLength":"8",
		  "MaxLength":"41",
		  "AllowedPattern":"[a-zA-Z0-9]*",
		  "ConstraintDescription":"must contain only alphanumeric characters."
		},
		"DBAllocatedStorage":{
		  "Default":"5",
		  "Description":"The size of the database (Gb)",
		  "Type":"Number",
		  "MinValue":"5",
		  "MaxValue":"1024",
		  "ConstraintDescription":"must be between 5 and 1024Gb."
		},
		"MyDBInstanceClass":{
		  "Default":"db.t2.micro",
		  "Description":"The database instance type",
		  "Type":"String",
		  "ConstraintDescription":"must select a valid database instance type."
		},
		"VpcCidr": {
            "Description": "CIDR for VPC(10.0.0.0/16)",
            "Type": "String",
			"Default": "10.0.0.0/16"
        },
		"PublicSubnetCidr": {
            "Description": "CIDR for PublicSubnetC(10.0.0.0/24)",
            "Type": "String",
			"Default": "10.0.0.0/24"
        },
		"PrivateSubnet1Cidr": {
            "Description": "CIDR for PrivateSubnetA(10.0.1.0/24)",
            "Type": "String",
			"Default": "10.0.1.0/24"
        },
		"PrivateSubnet2Cidr": {
            "Description": "CIDR for PrivateSubnetB(10.0.2.0/24)",
            "Type": "String",
			"Default": "10.0.2.0/24"
        },
		"PrivateSubnet3Cidr": {
            "Description": "CIDR for PublicSubnetC(10.0.3.0/24)",
            "Type": "String",
			"Default": "10.0.3.0/24"
        },
		"OperatorEMail": {
		  "Description": "EMail address to notify if there are any scaling operations",
		  "Type": "String",
		  "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
		  "ConstraintDescription": "must be a valid email address."
		},
		"AccessControl": {
		  "Type": "String",
		  "Description": "Default permissions for the bucket",
		  "AllowedValues": [ "Private", "PublicRead", "PublicReadWrite", "AuthenticatedRead", "LogDeliveryWrite", "BucketOwnerRead", "BucketOwnerFullControl" ],
		  "Default": "PublicRead"
		},
		"s3bucket": {
		  "Type": "String",
		  "Description": "S3 Bucket name",
		   "AllowedPattern":"[a-z][a-z0-9]*",
		  "Default": "s3cloudformationbucket"
		}
  },

  "Mappings" : {
    "AWSNATAMI" : {
     "us-east-1" : { "AMI" : "ami-184dc970" },
			"us-west-1" : { "AMI" : "ami-a98396ec" },
			"us-west-2" : { "AMI" : "ami-290f4119" },
			"eu-west-1" : { "AMI" : "ami-14913f63" },
			"eu-central-1" : { "AMI" : "ami-ae380eb3" },
			"sa-east-1" : { "AMI" : "ami-8122969c" },
			"ap-southeast-1" : { "AMI" : "ami-6aa38238" },
			"ap-southeast-2" : { "AMI" : "ami-893f53b3" },
			"ap-northeast-1" : { "AMI" : "ami-27d6e626" }
    },

   "AWSInstanceType2Arch" : {
		  "t2.nano"     : { "Arch" : "HVM64"  },
		  "t2.micro"    : { "Arch" : "HVM64"  },
		  "t2.small"    : { "Arch" : "HVM64"  },
		  "t2.medium"   : { "Arch" : "HVM64"  },
		  "t2.large"    : { "Arch" : "HVM64"  },
		  "m3.medium"   : { "Arch" : "HVM64"  },
		  "m3.large"    : { "Arch" : "HVM64"  },
		  "m3.xlarge"   : { "Arch" : "HVM64"  },
		  "m3.2xlarge"  : { "Arch" : "HVM64"  },
		  "m4.large"    : { "Arch" : "HVM64"  },
		  "m4.xlarge"   : { "Arch" : "HVM64"  },
		  "m4.2xlarge"  : { "Arch" : "HVM64"  },
		  "m4.4xlarge"  : { "Arch" : "HVM64"  },
		  "m4.10xlarge" : { "Arch" : "HVM64"  }
		},

    "AWSRegionArch2AMI" : {
       "us-east-1"        : {"PV64" : "ami-2a69aa47", "HVM64" : "ami-6869aa05", "HVMG2" : "ami-1f12e965"},
		  "us-west-2"        : {"PV64" : "ami-7f77b31f", "HVM64" : "ami-7172b611", "HVMG2" : "ami-5c9b6124"},
		  "us-west-1"        : {"PV64" : "ami-a2490dc2", "HVM64" : "ami-31490d51", "HVMG2" : "ami-7291a112"},
		  "eu-west-1"        : {"PV64" : "ami-4cdd453f", "HVM64" : "ami-f9dd458a", "HVMG2" : "ami-b411c5cd"},
		  "eu-west-2"        : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-886369ec", "HVMG2" : "NOT_SUPPORTED"},
		  "eu-central-1"     : {"PV64" : "ami-6527cf0a", "HVM64" : "ami-ea26ce85", "HVMG2" : "ami-be40f2d1"},
		  "ap-northeast-1"   : {"PV64" : "ami-3e42b65f", "HVM64" : "ami-374db956", "HVMG2" : "ami-3efd2c58"},
		  "ap-northeast-2"   : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-2b408b45", "HVMG2" : "NOT_SUPPORTED"},
		  "ap-southeast-1"   : {"PV64" : "ami-df9e4cbc", "HVM64" : "ami-a59b49c6", "HVMG2" : "ami-3e91ed5d"},
		  "ap-southeast-2"   : {"PV64" : "ami-63351d00", "HVM64" : "ami-dc361ebf", "HVMG2" : "ami-84a142e6"},
		  "ap-south-1"       : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-ffbdd790", "HVMG2" : "ami-25ffbe4a"},
		  "us-east-2"        : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-f6035893", "HVMG2" : "NOT_SUPPORTED"},
		  "ca-central-1"     : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-730ebd17", "HVMG2" : "NOT_SUPPORTED"},
		  "sa-east-1"        : {"PV64" : "ami-1ad34676", "HVM64" : "ami-6dd04501", "HVMG2" : "NOT_SUPPORTED"},
		  "cn-north-1"       : {"PV64" : "ami-77559f1a", "HVM64" : "ami-8e6aa0e3", "HVMG2" : "NOT_SUPPORTED"},
		  "cn-northwest-1"   : {"PV64" : "ami-80707be2", "HVM64" : "ami-cb858fa9", "HVMG2" : "NOT_SUPPORTED"}
    }

  },

  "Resources" : {


    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Fn::Sub": "${VpcCidr}" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "PublicSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
	    "AvailabilityZone": { "Fn::Select": [ 0,{"Fn::GetAZs": "" } ] },
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : {"Fn::Sub": "${PublicSubnetCidr}"},
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "GatewayToInternet" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PublicSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },

    "PrivateSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
	    "AvailabilityZone": { "Fn::Select": [ 0,{"Fn::GetAZs": "" } ] },
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : {"Fn::Sub": "${PrivateSubnet1Cidr}"},
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Private1" }
        ]
      }
    },

    "PrivateRouteTable1" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Private1" }
        ]
      }
    },

    "PrivateSubnetRouteTableAssociation1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet1" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable1" }
      }
    },

    "PrivateRoute1" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PrivateRouteTable1" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "InstanceId" : { "Ref" : "NATDevice" }
      }
    },
	"PrivateSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
	    "AvailabilityZone": { "Fn::Select": [ 1,{"Fn::GetAZs": "" } ] },
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : {"Fn::Sub": "${PrivateSubnet2Cidr}"},
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Private2" }
        ]
      }
    },

    "PrivateRouteTable2" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Private2" }
        ]
      }
    },

    "PrivateSubnetRouteTableAssociation2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet2" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable2" }
      }
    },

    "PrivateRoute2" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PrivateRouteTable2" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "InstanceId" : { "Ref" : "NATDevice" }
      }
    },

    "NATDevice" : {
      "Type" : "AWS::EC2::Instance",
       "Properties" : {
			 "InstanceType" : { "Ref" :"InstanceType" },
			 "SourceDestCheck" : "false",
			 "KeyName" : { "Ref" : "KeyName" },
			 "SourceDestCheck" : "false",
			  "ImageId" : { "Fn::FindInMap" : [ "AWSNATAMI", { "Ref" : "AWS::Region" }, "AMI" ]},
			 "NetworkInterfaces" : [{
				"GroupSet" : [{ "Ref" : "NATSecurityGroup" }],
				"AssociatePublicIpAddress" : "true",
				"DeviceIndex" : "0",
				"DeleteOnTermination" : "true",
				"SubnetId" : { "Ref" : "PublicSubnet" }
			 }],
			 "Tags" : [
				{ "Key" : "Name", "Value" : "NATInstance" }
			 ],
			 "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
				"#!/bin/bash\n",
				"yum update -y && yum install -y yum-cron && chkconfig yum-cron on"
			 ]]}}
		   }
    },

    "NATSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable internal access to the NAT device",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
           { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0"} ,
           { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0"} ,
           { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : { "Ref" : "SSHLocation" }} ],
        "SecurityGroupEgress" : [
           { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0"} ,
           { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0"} ]
      }
    },
	 
    "BastionIPAddress" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "BastionHost" }
      }
    },

    "BastionHost" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceType" },
        "KeyName"  : { "Ref" : "KeyName" },
        "SubnetId" : { "Ref" : "PublicSubnet" },
          "ImageId"        : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" }, { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "SecurityGroupIds" : [{ "Ref" : "BastionSecurityGroup" }],
		 "Tags" : [	{ "Key" : "Name", "Value" : "BastionHost" } ]
      }
    },   

    "BastionSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable access to the Bastion host",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [ { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : { "Ref" : "SSHLocation" }} ],
        "SecurityGroupEgress"  : [ { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : {"Fn::Sub": "${PrivateSubnet1Cidr}"}},
		{ "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : {"Fn::Sub": "${PrivateSubnet2Cidr}"}}]
      }
    },

    "PublicElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
	 
      "Properties" : {
	    "CrossZone": "true",
        "SecurityGroups" : [ { "Ref" : "PublicLoadBalancerSecurityGroup" } ],
        "Subnets" : [ { "Ref" : "PublicSubnet" } ],
        "Listeners" : [ { "LoadBalancerPort" : "80", "InstancePort" : "80", "Protocol" : "HTTP" } ],
        "HealthCheck" : {
          "Target" : "HTTP:80/",
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "90",
          "Timeout" : "60"
        }
      }
    },

    "PublicLoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Public ELB Security Group with HTTP access on port 80 from the internet",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [ { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"} ],
        "SecurityGroupEgress" : [ { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"} ]
      }
    },
      "S3Bucket" : {
		  "Type": "AWS::S3::Bucket",
		  "Properties": { "AccessControl": { "Ref": "AccessControl" },
		        "BucketName" : { "Ref" : "s3bucket" }
		  }
		},
		  "ListS3BucketsInstanceProfile" : {
			  "Type" : "AWS::IAM::InstanceProfile",
			  "Properties" : {
				"Path" : "/",
				"Roles" : [
				  {
					"Ref" : "ListS3BucketsRole"
				  }
				]
			  }
		  },
		  "ListS3BucketsRole" : {
			  "Type" : "AWS::IAM::Role",
			  "Properties" : {
				"AssumeRolePolicyDocument": {
				  "Version" : "2012-10-17",
				  "Statement" : [{ "Effect" : "Allow",
   				  "Principal" : { "Service" : ["ec2.amazonaws.com"] },
					  "Action" : ["sts:AssumeRole" ]}]
				},
				"Path" : "/",
				"Policies": [ {
				   "PolicyName": "s3accesspolicy",
				   "PolicyDocument": {
					  "Version" : "2012-10-17",
					  "Statement": [ {
						 "Effect": "Allow",
						 "Action": ["s3:GetObject", "s3:PutObject"],
						 "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "S3Bucket" } , "/*" ]]}} ]
				   }
				   } ]
			  }
			
		   },
		"NotificationTopic": {
		  "Type": "AWS::SNS::Topic",
		  "Properties": {
			"Subscription": [ { "Endpoint": { "Ref": "OperatorEMail" }, "Protocol": "email" } ]
		   }
		},
    "WebServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones": [{ "Fn::Select": [ 0,{"Fn::GetAZs": "" } ] },{ "Fn::Select": [ 1,{"Fn::GetAZs": "" } ] }],
        "VPCZoneIdentifier" : [{ "Ref" : "PrivateSubnet1" },{ "Ref" : "PrivateSubnet2" }],
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig"  },
		"NotificationConfiguration" : {
				"TopicARN" : { "Ref" : "NotificationTopic" },
				"NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",									
									  "autoscaling:EC2_INSTANCE_TERMINATE"]
				 },
        "MinSize" : "2",
        "MaxSize" : "10",
        "DesiredCapacity" : { "Ref" : "WebServerCapacity" },
        "LoadBalancerNames" : [ { "Ref" : "PublicElasticLoadBalancer" } ],
        "Tags" : [ { "Key" : "Network", "Value" : "Private", "PropagateAtLaunch" : "true" } ]
      }
    },

    "LaunchConfig"  : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {

        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "httpd"        : []
              }
            },

            "files" : {
              "/var/www/html/index.html" : {
                "content" : { "Fn::Join" : ["\n", [
                  "<img src=\"https://s3.amazonaws.com/cloudformation-examples/cloudformation_graphic.png\" alt=\"AWS CloudFormation Logo\"/>",
                  "<h1>Congratulations, IaC challenge completed:Madhava.</h1>"
                ]]},
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root"
              }
            },

            "services" : {
              "sysvinit" : {
                "httpd" : {
                  "enabled"       : "true",
                  "ensureRunning" : "true"
                }
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId"        : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" }, { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "SecurityGroups" : [ { "Ref" : "WebServerSecurityGroup" } ],
        "InstanceType"   : { "Ref" : "InstanceType" },
        "KeyName"        : { "Ref" : "KeyName" },
		"IamInstanceProfile" : { "Ref" : "ListS3BucketsInstanceProfile" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "yum update -y aws-cfn-bootstrap\n",

          "# Install Apache and configure as a reverse Frontend\n",
          "/opt/aws/bin/cfn-init --stack ", { "Ref" : "AWS::StackId" }, " --resource LaunchConfig ",
          "    --region ", { "Ref" : "AWS::Region" }, "\n",

          "# Signal completion\n",
          "/opt/aws/bin/cfn-signal -e $? -r \" setup done\" '", { "Ref" : "WebServerWaitHandle" }, "'\n"
        ]]}}
      }
    },

    "WebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Allow access from load balancer and bastion as well as outbound HTTP and HTTPS traffic",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref" : "PublicLoadBalancerSecurityGroup" } } ,
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "SourceSecurityGroupId" : { "Ref" : "BastionSecurityGroup" } } ],
        "SecurityGroupEgress" : [
           { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0" } ,
           { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" } ]
      }
    },

    "WebServerWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WebServerWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "WebServerGroup",
      "Properties" : {
        "Handle"  : { "Ref" : "WebServerWaitHandle" },
        "Timeout" : "600",
        "Count"   : { "Ref" : "WebServerCapacity" }
      }
    },
	"WebServerScaleUpPolicy" : {
			  "Type" : "AWS::AutoScaling::ScalingPolicy",
			  "Properties" : {
				"AdjustmentType" : "ChangeInCapacity",
				"AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
				"Cooldown" : "60",
				"ScalingAdjustment" : "1"
			  }
        },
       "WebServerScaleDownPolicy" : {
		  "Type" : "AWS::AutoScaling::ScalingPolicy",
		  "Properties" : {
			"AdjustmentType" : "ChangeInCapacity",
			"AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
			"Cooldown" : "60",
			"ScalingAdjustment" : "-1"
		  }
       },

	   "CPUAlarmHigh": {
			 "Type": "AWS::CloudWatch::Alarm",
			 "Properties": {
				"AlarmDescription": "Scale-up if CPU > 80% for 10 minutes",
				"MetricName": "CPUUtilization",
				"Namespace": "AWS/EC2",
				"Statistic": "Average",
				"Period": "300",
				"EvaluationPeriods": "2",
				"Threshold": "80",
				"AlarmActions": [ { "Ref": "WebServerScaleUpPolicy" } ],
				"Dimensions": [
				  {
					"Name": "AutoScalingGroupName",
					"Value": { "Ref": "WebServerGroup" }
				  }
				],
				"ComparisonOperator": "GreaterThanThreshold"
			  }
        },
       "CPUAlarmLow": {
			 "Type": "AWS::CloudWatch::Alarm",
			 "Properties": {
				"AlarmDescription": "Scale-down if CPU < 20% for 10 minutes",
				"MetricName": "CPUUtilization",
				"Namespace": "AWS/EC2",
				"Statistic": "Average",
				"Period": "300",
				"EvaluationPeriods": "2",
				"Threshold": "20",
				"AlarmActions": [ { "Ref": "WebServerScaleDownPolicy" } ],
				"Dimensions": [
				  {
					"Name": "AutoScalingGroupName",
					"Value": { "Ref": "WebServerGroup" }
				  }
				],
				"ComparisonOperator": "LessThanThreshold"
			  }
        },
	"MyDBSubnetGroup":{

      "Type":"AWS::RDS::DBSubnetGroup",
      "Properties":{
        "DBSubnetGroupDescription":"Subnets available for the RDS DB Instance",
        "SubnetIds":[{ "Ref" : "PrivateSubnet1" },{ "Ref" : "PrivateSubnet2" }]
      }
    },
    "DBSecurityGroup":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "GroupDescription":"Allow access to the Postgres from the NAT Instance",
        "VpcId":{
          "Ref":"VPC"
        },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "SourceSecurityGroupId" : { "Ref" : "BastionSecurityGroup" } } ],
        "SecurityGroupEgress" : [
           { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0" } ,
           { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" } ]
      }
    },
	 
	   "MyDB":{
	    "DependsOn" : ["MyDBSubnetGroup","DBSecurityGroup"],
      "Type":"AWS::RDS::DBInstance",
      "Properties":{
        "AllocatedStorage":{
          "Ref":"DBAllocatedStorage"
        },
        
        "VPCSecurityGroups":[
          {
            "Ref":"DBSecurityGroup"
          }
        ],
        "DBName":{
          "Ref":"MyDBName"
        },
        "DBInstanceClass":{
          "Ref":"MyDBInstanceClass"
        },
        "DBSubnetGroupName":{
          "Ref":"MyDBSubnetGroup"
        },
        "Engine":"postgres",
        "EngineVersion":"9.5.2",
        "MasterUsername":{
          "Ref":"DBUser"
        },
        "MasterUserPassword":{
          "Ref":"DBPassword"
        },

        "Tags":[
          {
            "Key":"Name",
            "Value":{
              "Ref":"DBIdentifier"
            }
          }
        ]
      }
    }

  },

  "Outputs" : {
    "WebSite" : {
      "Description" : "URL of the website",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "PublicElasticLoadBalancer", "DNSName" ]}]]}
    },
    "Bastion" : {
      "Description" : "IP Address of the Bastion host",
      "Value" :  { "Ref" : "BastionIPAddress" }
    },
	"DBAddress":{
		  "Description":"address of database endpoint", "Value":{"Fn::GetAtt":[ "MyDB", "Endpoint.Address" ] }},
		  "DBPort":{"Description":"database endpoint port", "Value":{ "Fn::GetAtt":[ "MyDB", "Endpoint.Port"] }}
  }
}
